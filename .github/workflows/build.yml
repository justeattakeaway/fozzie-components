# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Fozzie Components CI

on:
  pull_request

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo.
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Node
    # Setup Node 16.
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules if cache exists. If not, cache is created at end of build.
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible.
    - name: Install Dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn --prefer-offline

  danger:
    needs: install
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo.
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Node
    # Setup Node 16.
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules if cache exists. If not, cache is created at end of build.
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Run Danger Checks.
    - name: Run Danger Checks
      run: yarn danger ci --failOnErrors
      env:
        DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo.
    - name: Checkout
      uses: actions/checkout@v3
    # Detect changed files.
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          global:
            - '*.js'
            - '*.json'
            - '.github/workflows/**'
            - 'packages/storybook/**'
        list-files: shell
    # Setup Node 16.
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job.
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Restore Turborepo's component 'dist' cache - If not, cache is created at end of build.
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
        # Use one of the following keys if the above is not found.
        restore-keys: |
          turborepo-dist-cache-${{ github.ref_name }}
          turborepo-dist-cache-master
    # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
    - name: Build Components
      run: yarn build --cache-dir=".turbo"
    # Run Bundlewatch checks
    - name: Run Bundlewatch checks
      run: yarn bundlewatch
    # Lint all components if 'master' or root-level changes.
    - name: Lint All Components
      if: steps.changes.outputs.global == 'true' || github.ref == 'refs/heads/master'
      run: yarn lint --concurrency=10 --cache-dir=".turbo"
    # Lint changed components if no root-level changes and not master.
    - name: Lint Changed Components
      if: steps.changes.outputs.global == 'false' && github.ref != 'refs/heads/master'
      run: yarn lint --filter=[master] --concurrency=10 --cache-dir=".turbo"
    # Cache 'storybook-static'
    - name: Cache Storybook Static Directory
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Build Storybook with all components if 'master' or root-level changes
    - name: Build Storybook (All Components)
      if: steps.changes.outputs.global == 'true' || github.ref == 'refs/heads/master'
      run: yarn storybook:build
    # Build Storybook with changed components + dependants if no root-level changes and not master.
    - name: Build Storybook (Changed Components + Dependants)
      if: steps.changes.outputs.global == 'false' &&  github.ref != 'refs/heads/master'
      run: yarn storybook:build-changed
    env:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_TOKEN }}

  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        component-type: ['atoms', 'molecules', 'organisms' , 'pages', 'templates', 'tools', 'services']
    name: unit-tests-${{ matrix.component-type }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    # Detect changed files
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          global:
            - '*.js'
            - '*.json'
            - '.github/workflows/**'
            - 'packages/storybook/**'
        list-files: shell
    # Setup Node 16
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job
    - name: Restore Cache -  Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Restore Cache - Turborepo Dist
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
    - name: Build Components
      run: yarn build --cache-dir=".turbo"
    # Unit Test all components if 'master' or root-level changes.
    - name: Unit Test All Components
      if: steps.changes.outputs.global == 'true' || github.ref == 'refs/heads/master'
      run: yarn ci:test:${{ matrix.component-type}} --concurrency=10
    # Unit Test changed components + dependants if no root-level changes and not master.
    - name: Unit Test Changed Components + Dependants
      if: steps.changes.outputs.global == 'false' && github.ref != 'refs/heads/master'
      run: yarn ci:test:${{ matrix.component-type}} --concurrency=10 --filter=...[master]

  browser-tests:
    strategy:
      fail-fast: false
      matrix:
        component-type: ['atoms', 'molecules', 'organisms' , 'pages']
    name: browser-tests-${{ matrix.component-type }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    # Detect changed files
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          global:
            - '*.js'
            - '*.json'
            - '.github/workflows/**'
            - 'packages/storybook/**'
        list-files: shell
    # Setup Node 16
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job
    - name: Restore Cache -  Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Restore Cache - Turborepo Dist
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
    - name: Build Components
      run: yarn build --cache-dir=".turbo"
    # Restore Storybook 'storybook-static'
    - name: Cache Storybook Static Directory
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Run the following steps if previous jobs have succeeded to prevent wasting Percy screenshots.
    - uses: technote-space/workflow-conclusion-action@v3
    # Run Component / A11y / Visual Tests against all components if 'master' or root-level changes.
    - name: Run All Component / A11y / Visual Tests
      if: ${{ (github.ref == 'refs/heads/master' || steps.changes.outputs.global == 'true') && (env.WORKFLOW_CONCLUSION != 'failure') }}
      run: |
        yarn storybook:serve-static &
        yarn ci:test-component:chrome:${{ matrix.component-type }} --concurrency=1 &&
        yarn ci:test-a11y:chrome:${{ matrix.component-type }} --concurrency=1 &&
        yarn ci:test:visual:${{ matrix.component-type }} --concurrency=1
    - name: Run Changed Component / A11y / Visual Tests + Dependants
    # Run Component / A11y / Visual Tests against changed components + dependants if no root-level changes and not master.
      if:  ${{ (github.ref != 'refs/heads/master' && steps.changes.outputs.global == 'false' && env.WORKFLOW_CONCLUSION != 'failure') }}
      run: |
        yarn storybook:serve-static &
        yarn ci:test-component:chrome:${{ matrix.component-type }} --concurrency=1 --filter=...[master] &&
        yarn ci:test-a11y:chrome:${{ matrix.component-type }} --concurrency=1 --filter=...[master] &&
        yarn ci:test:visual:${{ matrix.component-type }} --concurrency=1 --filter=...[master]
    # On Failure - Upload Allure Report
    - name: Generate Allure Report
      if: failure()
      run: yarn allure:generate
    - name: Upload Allure Report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.component-type }}
        path: |
          allure-report
          test/results/axe-violations
    env:
      PERCY_TOKEN_F_BUTTON: ${{ secrets.PERCY_TOKEN_F_BUTTON }}
      PERCY_TOKEN_F_FORM_FIELD: ${{ secrets.PERCY_TOKEN_F_FORM_FIELD }}
      PERCY_TOKEN_F_ALERT: ${{ secrets.PERCY_TOKEN_F_ALERT }}
      PERCY_TOKEN_F_CARD_WITH_CONTENT: ${{ secrets.PERCY_TOKEN_F_CARD_WITH_CONTENT }}
      PERCY_TOKEN_F_MEGA_MODAL: ${{ secrets.PERCY_TOKEN_F_MEGA_MODAL }}
      PERCY_TOKEN_F_COOKIE_BANNER: ${{ secrets.PERCY_TOKEN_F_COOKIE_BANNER }}
      PERCY_TOKEN_F_FOOTER: ${{ secrets.PERCY_TOKEN_F_FOOTER }}
      PERCY_TOKEN_F_HEADER: ${{ secrets.PERCY_TOKEN_F_HEADER }}
      PERCY_TOKEN_F_STATUS_BANNER: ${{ secrets.PERCY_TOKEN_F_STATUS_BANNER }}
      PERCY_TOKEN_F_ACCOUNT_INFO: ${{ secrets.PERCY_TOKEN_F_ACCOUNT_INFO }}
      PERCY_TOKEN_F_CHECKOUT: ${{ secrets.PERCY_TOKEN_F_CHECKOUT }}
      PERCY_TOKEN_F_CONTACT_PREFERENCES: ${{ secrets.PERCY_TOKEN_F_CONTACT_PREFERENCES }}
      PERCY_TOKEN_F_MFA: ${{ secrets.PERCY_TOKEN_F_MFA }}
      PERCY_TOKEN_F_REGISTRATION: ${{ secrets.PERCY_TOKEN_F_REGISTRATION }}
      PERCY_TOKEN_F_TAKEAWAYPAY_ACTIVATION: ${{ secrets.PERCY_TOKEN_F_TAKEAWAYPAY_ACTIVATION }}

  storybook-deploy:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo.
    - name: Checkout
      uses: actions/checkout@v3
    # Setup Node 16.
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job.
    - name: Restore Cache -  Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible.
    - name: Install Dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn --prefer-offline
    # Restore Cache - Turborepo Dist.
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Restore Storybook 'storybook-static'.
    - name: Cache Storybook Static Directory
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Deploy Storybook.
    - name: Storybook deploy
      run: yarn storybook:deploy
      env:
        GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}

  # publish:
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   steps:
  #     # Checkout the Repo.
  #     - uses: actions/checkout@v3
  #     # Setup Node 16.
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: 'yarn'
  #     # Restore node_modules - Cache should exist as one was created in previous 'install' job.
  #     - name: Restore Cache -  Node Modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: node-modules-${{ hashFiles('**/yarn.lock') }}
  #     # Restore Cache - Turborepo Dist.
  #     - name: Cache Turborepo Dist
  #       id: turborepo-dist-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: .turbo
  #         key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
  #     - run: yarn build --cache-dir=".turbo"
  #     # Prevent NPM publishes until we've fully migrated away from CircleCI.
  #     - name: Auth with NPM
  #       run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
  #     - name: Publish unreleased package versions to npm
  #       run: yarn lerna publish from-package --ignore-scripts --yes
