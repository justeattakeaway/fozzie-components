# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Fozzie Components CI

on:
  push:
    branches:
    - master

# This needs to be uncommented when we finish migration so that Danger works.
# on:
#   pull_request

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Node
    # Setup Node 16
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules if cache exists. If not, cache is created at end of build.
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible
    - name: Install Dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn --prefer-offline

  # Uncomment when fully migrated
  # danger:
  #   needs: install
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Checkout the Repo
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Setup Node
  #   # Setup Node 16
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: 16
  #       cache: 'yarn'
  #   # Restore node_modules if cache exists. If not, cache is created at end of build.
  #   - name: Cache Node Modules
  #     id: cache-node-modules
  #     uses: actions/cache@v2
  #     with:
  #       path: '**/node_modules'
  #       key: node-modules-${{ hashFiles('**/yarn.lock') }}
  #   # Run Danger Checks
  #   - name: Run Danger Checks
  #     run: yarn danger ci --failOnErrors
  #     env:
  #       DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    # Setup Node 16
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job
    - name: Cache Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Restore Turborepo's component 'dist' cache - If not, cache is created at end of build.
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
        # Use one of the following keys if the above is not found.
        restore-keys: |
          turborepo-dist-cache-${{ github.ref_name }}
          turborepo-dist-cache-master
    # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
    - name: Build Components
      run: yarn build --cache-dir=".turbo"
    # Run Bundlewatch checks
    - name: Run Bundlewatch checks
      run: yarn bundlewatch
    # Lint components
    - name: Lint Components
      run: yarn lint --concurrency=10
    # Cache 'storybook-static'
    - name: Cache Storybook Static Directory
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Build Storybook
    - name: Storybook Build
      run: yarn storybook:build
    env:
      BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_TOKEN }}
      RUN_ALL: true

  tests:
    strategy:
      fail-fast: false
      matrix:
        component-type: ['atoms', 'molecules', 'organisms' , 'pages', 'templates', 'tools', 'services']
    name: tests-${{ matrix.component-type }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    # Setup Node 16
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job
    - name: Restore Cache -  Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Restore Cache - Turborepo Dist
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Build components. Only components with out-of-date Turborepo hash will rebuilt, speeding up build time.
    - name: Build Components
      run: yarn build --cache-dir=".turbo"
    # Unit Test components.
    - name: Unit Test Components
      run: yarn ci:test:${{ matrix.component-type}} --concurrency=10
    # Restore Storybook 'storybook-static'
    - name: Cache Storybook Static Directory
      if: matrix.component-type == 'atoms' || matrix.component-type == 'molecules' || matrix.component-type == 'organisms' || matrix.component-type == 'pages'
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Run Component / A11y / Visual Tests
    - name: Run Component / A11y / Visual Tests
      if: matrix.component-type == 'atoms' || matrix.component-type == 'molecules' || matrix.component-type == 'organisms' || matrix.component-type == 'pages'
      run: |
        yarn storybook:serve-static &
        yarn ci:test-component:chrome:${{ matrix.component-type }} --concurrency=1 &&
        yarn ci:test-a11y:chrome:${{ matrix.component-type }} --concurrency=1
    # On Failure - Upload Allure Report
    - name: Generate Allure Report
      if: failure()
      run: yarn allure:generate
    - name: Upload Allure Report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.component-type }}
        path: |
          allure-report
          test/results/axe-violations

  storybook-deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Checkout the Repo
    - name: Checkout
      uses: actions/checkout@v3
    # Setup Node 16
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
    # Restore node_modules - Cache should exist as one was created in previous 'install' job
    - name: Restore Cache -  Node Modules
      id: cache-node-modules
      uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: node-modules-${{ hashFiles('**/yarn.lock') }}
    # Run 'yarn' if cache doesn't exist. Use --prefer-offline to download packages from yarn cache folder where possible
    - name: Install Dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: yarn --prefer-offline
    # Restore Cache - Turborepo Dist
    - name: Cache Turborepo Dist
      id: turborepo-dist-cache
      uses: actions/cache@v2
      with:
        path: .turbo
        key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Restore Storybook 'storybook-static'
    - name: Cache Storybook Static Directory
      id: storybook-cache
      uses: actions/cache@v2
      with:
        path: ./packages/storybook/storybook-static
        key: storybook-cache-${{ github.ref_name }}-${{ github.run_id }}
    # Deploy Storybook
    - name: Storybook deploy
      run: yarn storybook:deploy
      env:
        GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}

  # publish:
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   steps:
  #     # Checkout the Repo
  #     - uses: actions/checkout@v3
  #     # Setup Node 16
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: 'yarn'
  #     # Restore node_modules - Cache should exist as one was created in previous 'install' job
  #     - name: Restore Cache -  Node Modules
  #       id: cache-node-modules
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: node-modules-${{ hashFiles('**/yarn.lock') }}
  #     # Restore Cache - Turborepo Dist
  #     - name: Cache Turborepo Dist
  #       id: turborepo-dist-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: .turbo
  #         key: turborepo-dist-cache-${{ github.ref_name }}-${{ github.run_id }}
  #     - run: yarn build --cache-dir=".turbo"
  #     # Prevent NPM publishes until we've fully migrated away from CircleCI.
  #     - name: Auth with NPM
  #       run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
  #     - name: Publish unreleased package versions to npm
  #       run: yarn lerna publish from-package --ignore-scripts --yes
